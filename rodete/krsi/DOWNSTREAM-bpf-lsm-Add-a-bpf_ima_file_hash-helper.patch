From b4ce415095477a3a09ec38f38537530d9fd38efe Mon Sep 17 00:00:00 2001
From: Florent Revest <revest@google.com>
Date: Fri, 5 Jun 2020 15:00:27 +0200
Subject: [PATCH] DOWNSTREAM: bpf: lsm: Add a bpf_ima_file_hash helper

The bpf_ima_file_hash helper can be used to retrieve the hash of a
struct file from the IMA cache. Its implementation is a simple call to
ima_file_hash, the usage is fairly similar.

DOWNSTREAM REASON: This helper might sleep and will depend on sleepable
BPF.

Signed-off-by: Florent Revest <revest@google.com>
Change-Id: Ic43d39ac1cc76fcecec597f058b40f50e08c39ad
---
 include/uapi/linux/bpf.h                | 21 +++++++++++++++++++++
 kernel/bpf/bpf_lsm_downstream_helpers.c | 20 ++++++++++++++++++++
 scripts/bpf_helpers_doc.py              |  2 ++
 tools/include/uapi/linux/bpf.h          | 21 +++++++++++++++++++++
 4 files changed, 64 insertions(+)

diff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h
index 2f018ea377cc..7bd97c5ea7d8 100644
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@ -3877,6 +3877,26 @@ union bpf_attr {
  *		0 on success, or a negative error in case of failure.
  *	Opcode
  *		0x21A
+ *
+ * int bpf_ima_file_hash(struct file *file, char *buf, size_t buf_len)
+ *	Description
+ *		This helper accesses the IMA measurement of the file given as
+ *		parameter. If buf is not NULL, this helper outputs the hash
+ *		into buf. If the hash is larger than buf_len, then only
+ *		buf_len bytes will be copied. It generally just makes sense to
+ *		pass a buffer capable of holding the largest possible hash:
+ *		IMA_MAX_DIGEST_SIZE. The file hash returned is based on the
+ *		entire file, including the appended signature.
+ *	Return
+ *		The hash algorithm (as defined in the enum hash_algo) on
+ *		success, or a negative error in case of failure.
+ *
+ *		**-EINVAL** if parameters are incorrect.
+ *
+ *		**-EOPNOTSUPP** if IMA is disabled or if no measurement is
+ *		available.
+ *	Opcode
+ *		0x21B
  */
 #define __BASE_BPF_FUNC_MAPPER(FN)	\
 	FN(unspec),			\
@@ -4047,6 +4067,7 @@ union bpf_attr {
 	FN(gen_id) OPCODE(0x218),			\
 	FN(output_argv) OPCODE(0x219),			\
 	FN(output_env) OPCODE(0x21A),			\
+	FN(ima_file_hash) OPCODE(0x21B),		\
 	/* */
 
 #define __EXTRA_BPF_FUNC_IGNORE_OPCODE(opcode)
diff --git a/kernel/bpf/bpf_lsm_downstream_helpers.c b/kernel/bpf/bpf_lsm_downstream_helpers.c
index 1f7db2b6b0fb..3fba2455776c 100644
--- a/kernel/bpf/bpf_lsm_downstream_helpers.c
+++ b/kernel/bpf/bpf_lsm_downstream_helpers.c
@@ -14,6 +14,7 @@
 #include <linux/types.h>
 #include <linux/btf_ids.h>
 #include <linux/binfmts.h>
+#include <linux/ima.h>
 
 static atomic64_t bpf_id_gen;
 
@@ -129,6 +130,23 @@ const struct bpf_func_proto bpf_output_env_proto = {
 	.arg5_type	= ARG_CONST_SIZE_OR_ZERO,
 };
 
+BPF_CALL_3(bpf_ima_file_hash, struct file *, file, void *, buf, size_t, buf_len)
+{
+	WARN_ONCE(1, "Calling bpf_ima_file_hash might sleep");
+	return ima_file_hash(file, buf, buf_len);
+}
+
+BTF_ID_LIST_SINGLE(bpf_ima_file_hash_btf_ids, struct, file)
+const struct bpf_func_proto bpf_ima_file_hash_proto = {
+	.func		= bpf_ima_file_hash,
+	.gpl_only	= true,
+	.ret_type	= RET_INTEGER,
+	.arg1_type	= ARG_PTR_TO_BTF_ID,
+	.arg1_btf_id	= &bpf_ima_file_hash_btf_ids[0],
+	.arg2_type	= ARG_PTR_TO_MEM,
+	.arg3_type	= ARG_CONST_SIZE,
+};
+
 const struct bpf_func_proto *bpf_lsm_downstream_func_proto
 			 (enum bpf_func_id func_id, const struct bpf_prog *prog)
 {
@@ -139,6 +157,8 @@ const struct bpf_func_proto *bpf_lsm_downstream_func_proto
 		return &bpf_output_argv_proto;
 	case BPF_FUNC_output_env:
 		return &bpf_output_env_proto;
+	case BPF_FUNC_ima_file_hash:
+		return &bpf_ima_file_hash_proto;
 	default:
 		return NULL;
 	}
diff --git a/scripts/bpf_helpers_doc.py b/scripts/bpf_helpers_doc.py
index 8c0f752542f9..5c4187fe8d0a 100755
--- a/scripts/bpf_helpers_doc.py
+++ b/scripts/bpf_helpers_doc.py
@@ -438,6 +438,7 @@ class PrinterHelpers(Printer):
             'struct path',
             'struct btf_ptr',
             'struct inode',
+            'struct file',
     ]
     known_types = {
             '...',
@@ -474,6 +475,7 @@ class PrinterHelpers(Printer):
             'struct sockaddr',
             'struct tcphdr',
             'struct linux_binprm',
+            'struct file',
             'struct seq_file',
             'struct tcp6_sock',
             'struct tcp_sock',
diff --git a/tools/include/uapi/linux/bpf.h b/tools/include/uapi/linux/bpf.h
index 2f018ea377cc..7bd97c5ea7d8 100644
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@ -3877,6 +3877,26 @@ union bpf_attr {
  *		0 on success, or a negative error in case of failure.
  *	Opcode
  *		0x21A
+ *
+ * int bpf_ima_file_hash(struct file *file, char *buf, size_t buf_len)
+ *	Description
+ *		This helper accesses the IMA measurement of the file given as
+ *		parameter. If buf is not NULL, this helper outputs the hash
+ *		into buf. If the hash is larger than buf_len, then only
+ *		buf_len bytes will be copied. It generally just makes sense to
+ *		pass a buffer capable of holding the largest possible hash:
+ *		IMA_MAX_DIGEST_SIZE. The file hash returned is based on the
+ *		entire file, including the appended signature.
+ *	Return
+ *		The hash algorithm (as defined in the enum hash_algo) on
+ *		success, or a negative error in case of failure.
+ *
+ *		**-EINVAL** if parameters are incorrect.
+ *
+ *		**-EOPNOTSUPP** if IMA is disabled or if no measurement is
+ *		available.
+ *	Opcode
+ *		0x21B
  */
 #define __BASE_BPF_FUNC_MAPPER(FN)	\
 	FN(unspec),			\
@@ -4047,6 +4067,7 @@ union bpf_attr {
 	FN(gen_id) OPCODE(0x218),			\
 	FN(output_argv) OPCODE(0x219),			\
 	FN(output_env) OPCODE(0x21A),			\
+	FN(ima_file_hash) OPCODE(0x21B),		\
 	/* */
 
 #define __EXTRA_BPF_FUNC_IGNORE_OPCODE(opcode)
-- 
2.30.0.478.g8a0d178c01-goog

