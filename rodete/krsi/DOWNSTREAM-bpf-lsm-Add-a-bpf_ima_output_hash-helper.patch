From be1fd246b1be428ea227107f4d0d121c5be488b9 Mon Sep 17 00:00:00 2001
From: KP Singh <kpsingh@google.com>
Date: Thu, 16 Jul 2020 20:37:23 +0200
Subject: [PATCH] DOWNSTREAM: bpf: lsm: Add a bpf_ima_output_hash helper

DOWNSTREAM REASON: The actual helper bpf_ima_hash will be upstreamed
and can be used in conjunction with sleepable BPF. Until then, we still
need to provide IMA hashes for HELM execution logs.

Change-Id: I5e64400b5521c9ab8c9501a1ede9bd17b909ab72
---
 include/uapi/linux/bpf.h                | 22 ++++++
 kernel/bpf/bpf_lsm_downstream_helpers.c | 97 +++++++++++++++++++++++++
 kernel/bpf/verifier.c                   |  1 +
 tools/include/uapi/linux/bpf.h          | 22 ++++++
 4 files changed, 142 insertions(+)

diff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h
index 2c6d900920f7..f338a4f74aa8 100644
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@ -3928,6 +3928,27 @@ union bpf_attr {
  *		0 on success, or a negative error in case of failure.
  *	Opcode
  *		0x21E
+ *
+ * u64 bpf_ima_output_file_hash(struct file *file, void *map, u64 flags, void *meta, int meta_size)
+ *	Description
+ *		This outputs the IMA hash of the file in to the perf ring buffer.
+ * 		Since the ima_file_hash cannot be called from an atomic context, the
+ *		actual output happens asynchronously in a task worker.
+ *
+ *		*map* should be of type **BPF_MAP_TYPE_PERF_EVENT_ARRAY**. The
+ *		event must have the following attributes: **PERF_SAMPLE_RAW**
+ *		as **sample_type**, **PERF_TYPE_SOFTWARE** as **type**, and
+ *		**PERF_COUNT_SW_BPF_OUTPUT** as **config**.
+ *
+ *		The *flags* are used to indicate the index in *map* for which
+ *		the value must be put, masked with **BPF_F_INDEX_MASK**.
+ *		Alternatively, *flags* can be set to **BPF_F_CURRENT_CPU**
+ *		to indicate that the index of the current CPU core should be
+ *		used.
+ *	Return
+ *		0 on success, or a negative error in case of failure.
+ *	Opcode
+ *		0x21F
  */
 #define __BASE_BPF_FUNC_MAPPER(FN)	\
 	FN(unspec),			\
@@ -4102,6 +4123,7 @@ union bpf_attr {
 	FN(get_file_path) OPCODE(0x21C),		\
 	FN(get_cwd) OPCODE(0x21D),			\
 	FN(get_handle) OPCODE(0x21E),			\
+	FN(ima_output_file_hash) OPCODE(0x21F),		\
 	/* */
 
 #define __EXTRA_BPF_FUNC_IGNORE_OPCODE(opcode)
diff --git a/kernel/bpf/bpf_lsm_downstream_helpers.c b/kernel/bpf/bpf_lsm_downstream_helpers.c
index 112e67785309..ed7f05631494 100644
--- a/kernel/bpf/bpf_lsm_downstream_helpers.c
+++ b/kernel/bpf/bpf_lsm_downstream_helpers.c
@@ -18,6 +18,8 @@
 #include <linux/mount.h>
 #include <linux/fs_struct.h>
 #include <linux/fdtable.h>
+#include <linux/task_work.h>
+#include <crypto/hash_info.h>
 
 static atomic64_t bpf_id_gen;
 
@@ -133,6 +135,99 @@ const struct bpf_func_proto bpf_output_env_proto = {
 	.arg5_type	= ARG_CONST_SIZE_OR_ZERO,
 };
 
+#define MAX_IMA_HASH_SIZE 64
+
+struct ima_file_hash_work {
+	struct callback_head work;
+	struct file *file;
+	struct bpf_map *map;
+	u64 flags;
+	void *meta;
+	size_t meta_len;
+};
+
+void do_ima_file_hash_event(struct callback_head *callback)
+{
+	struct ima_file_hash_work *info;
+	char buf[MAX_IMA_HASH_SIZE];
+	int ret;
+
+	info = container_of(callback, struct ima_file_hash_work, work);
+	ret = ima_file_hash(info->file, buf, MAX_IMA_HASH_SIZE);
+	if (ret < 0)
+		goto err;
+
+	migrate_disable();
+	ret = bpf_event_output(info->map, info->flags, info->meta,
+			       info->meta_len, buf, hash_digest_size[ret],
+			       NULL);
+	migrate_enable();
+
+err:
+	bpf_map_put(info->map);
+	fput(info->file);
+	if (info->meta_len)
+		kfree(info->meta);
+	kfree(info);
+}
+
+BPF_CALL_5(bpf_ima_output_file_hash, struct file *, file, struct bpf_map *, map,
+	   u64, flags, void *, meta, size_t, meta_len)
+{
+	struct ima_file_hash_work *info;
+	int ret;
+
+	if (!file)
+		return -EINVAL;
+
+	info = kmalloc(sizeof(struct ima_file_hash_work),
+		       GFP_NOWAIT | __GFP_NOWARN);
+	if (!info)
+		return -ENOMEM;
+
+	if (meta_len) {
+		info->meta = kmemdup(meta, meta_len, GFP_NOWAIT | __GFP_NOWARN);
+		if (!info->meta) {
+			ret = -ENOMEM;
+			goto err_info;
+		}
+	}
+
+	info->file = get_file(file);
+	bpf_map_inc(map);
+	info->meta_len = meta_len;
+	info->map = map;
+	info->flags = flags;
+
+	init_task_work(&info->work, do_ima_file_hash_event);
+	ret = task_work_add(current, &info->work, false);
+	if (ret < 0)
+		goto err;
+
+	return 0;
+
+err:
+	kfree(info->meta);
+	fput(info->file);
+	bpf_map_put(info->map);
+err_info:
+	kfree(info);
+	return ret;
+}
+
+BTF_ID_LIST_SINGLE(bpf_ima_output_file_hash_btf_ids, struct, file)
+const struct bpf_func_proto bpf_ima_output_file_hash_proto = {
+	.func		= bpf_ima_output_file_hash,
+	.gpl_only	= true,
+	.ret_type	= RET_INTEGER,
+	.arg1_type	= ARG_PTR_TO_BTF_ID,
+	.arg1_btf_id	= &bpf_ima_output_file_hash_btf_ids[0],
+	.arg2_type	= ARG_CONST_MAP_PTR,
+	.arg3_type	= ARG_ANYTHING,
+	.arg4_type	= ARG_PTR_TO_MEM,
+	.arg5_type	= ARG_CONST_SIZE_OR_ZERO,
+};
+
 BPF_CALL_3(bpf_ima_file_hash, struct file *, file, void *, buf, size_t, buf_len)
 {
 	WARN_ONCE(1, "Calling bpf_ima_file_hash might sleep");
@@ -329,6 +424,8 @@ const struct bpf_func_proto *bpf_lsm_downstream_func_proto
 		return &bpf_output_env_proto;
 	case BPF_FUNC_ima_file_hash:
 		return &bpf_ima_file_hash_proto;
+	case BPF_FUNC_ima_output_file_hash:
+		return &bpf_ima_output_file_hash_proto;
 	case BPF_FUNC_get_file_path:
 		return &bpf_get_file_path_proto;
 	case BPF_FUNC_get_cwd:
diff --git a/kernel/bpf/verifier.c b/kernel/bpf/verifier.c
index 8d7b219930f2..40068afaf4fa 100644
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@ -4379,6 +4379,7 @@ static int check_map_func_compatibility(struct bpf_verifier_env *env,
 		    func_id != BPF_FUNC_skb_output &&
 		    func_id != BPF_FUNC_output_argv &&
 		    func_id != BPF_FUNC_output_env &&
+		    func_id != BPF_FUNC_ima_output_file_hash &&
 		    func_id != BPF_FUNC_perf_event_read_value &&
 		    func_id != BPF_FUNC_xdp_output)
 			goto error;
diff --git a/tools/include/uapi/linux/bpf.h b/tools/include/uapi/linux/bpf.h
index 2c6d900920f7..f338a4f74aa8 100644
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@ -3928,6 +3928,27 @@ union bpf_attr {
  *		0 on success, or a negative error in case of failure.
  *	Opcode
  *		0x21E
+ *
+ * u64 bpf_ima_output_file_hash(struct file *file, void *map, u64 flags, void *meta, int meta_size)
+ *	Description
+ *		This outputs the IMA hash of the file in to the perf ring buffer.
+ * 		Since the ima_file_hash cannot be called from an atomic context, the
+ *		actual output happens asynchronously in a task worker.
+ *
+ *		*map* should be of type **BPF_MAP_TYPE_PERF_EVENT_ARRAY**. The
+ *		event must have the following attributes: **PERF_SAMPLE_RAW**
+ *		as **sample_type**, **PERF_TYPE_SOFTWARE** as **type**, and
+ *		**PERF_COUNT_SW_BPF_OUTPUT** as **config**.
+ *
+ *		The *flags* are used to indicate the index in *map* for which
+ *		the value must be put, masked with **BPF_F_INDEX_MASK**.
+ *		Alternatively, *flags* can be set to **BPF_F_CURRENT_CPU**
+ *		to indicate that the index of the current CPU core should be
+ *		used.
+ *	Return
+ *		0 on success, or a negative error in case of failure.
+ *	Opcode
+ *		0x21F
  */
 #define __BASE_BPF_FUNC_MAPPER(FN)	\
 	FN(unspec),			\
@@ -4102,6 +4123,7 @@ union bpf_attr {
 	FN(get_file_path) OPCODE(0x21C),		\
 	FN(get_cwd) OPCODE(0x21D),			\
 	FN(get_handle) OPCODE(0x21E),			\
+	FN(ima_output_file_hash) OPCODE(0x21F),		\
 	/* */
 
 #define __EXTRA_BPF_FUNC_IGNORE_OPCODE(opcode)
-- 
2.30.0.478.g8a0d178c01-goog

